name: ðŸš€ Build & Release

permissions:
  contents: write

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git Tag to build (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build_and_release:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install jinja2

      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Visual Studio Environment (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Determine tag name
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Configure & Build
        shell: bash
        env:
          CI: "1"
        run: |
          if [ "${RUNNER_OS}" = "Windows" ]; then
            scripts/windows/setup-deps.bat
            rm -rf build
            scripts/windows/build-release.bat
          else
            chmod +x scripts/linux/*.sh
            scripts/linux/setup-deps.sh
            rm -rf build
            mkdir build && cd build
            cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
            cmake --build . --parallel
            cd ..
          fi

      - name: Package Artifacts
        shell: bash
        run: |
          mkdir -p dist/bin dist/lib dist/include
  
          if [ "${RUNNER_OS}" = "Windows" ]; then
            cp build/bin/Release/Fractura.exe dist/bin/
            cp build/lib/Release/SilicaEngine.lib dist/lib/
            ZIP=Caelis-windows-${TAG}.zip
            powershell -Command "Compress-Archive -Path dist -DestinationPath $ZIP"
          else
            cp build/bin/Fractura      dist/bin/
            cp build/lib/libSilicaEngine.a dist/lib/
            ZIP=Caelis-linux-${TAG}.zip
            zip -r $ZIP dist
          fi
  
          echo "ZIP_NAME=$ZIP" >> $GITHUB_ENV

      - name: Publish Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
