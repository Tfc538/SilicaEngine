name: 🚀 Build & Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build_and_release:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: 🔧 Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        scripts/windows/setup-deps.bat
        scripts/windows/build-release.bat

    - name: 🔧 Build (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x scripts/linux/*.sh
        scripts/linux/setup-deps.sh

        # Configure explicitly with Unix Makefiles to avoid missing-variable errors
        cmake -S . -B build \
          -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Release

        cmake --build build --config Release

      shell: bash

    - name: 📦 Package Artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir dist
        mkdir dist\bin
        mkdir dist\lib
        mkdir dist\include

        copy build\bin\Fractura.exe dist\bin\
        copy build\lib\SilicaEngine.lib dist\lib\
        xcopy SilicaEngine\include dist\include /E /I /Y

        powershell -Command "Compress-Archive -Path dist -DestinationPath Caelis-windows-${{ github.ref_name }}.zip"

    - name: 📦 Package Artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p dist/bin dist/lib dist/include

        cp build/bin/Fractura dist/bin/
        cp build/lib/libSilicaEngine.a dist/lib/
        cp -r SilicaEngine/include dist/include

        zip -r Caelis-linux-${{ github.ref_name }}.zip dist

      shell: bash

    - name: 🚀 Publish Release Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          Caelis-windows-${{ github.ref_name }}.zip
          Caelis-linux-${{ github.ref_name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
